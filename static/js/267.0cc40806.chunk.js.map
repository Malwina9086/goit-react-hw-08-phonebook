{"version":3,"file":"static/js/267.0cc40806.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","../node_modules/@chakra-ui/layout/src/grid.tsx","../node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs","../node_modules/@chakra-ui/layout/src/simple-grid.tsx","../node_modules/@chakra-ui/button/src/icon-button.tsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts;\nexport const selectFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { FormControl, FormLabel, Input, Button, Box } from '@chakra-ui/react';\n\nconst ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const [formData, setFormData] = useState({ name: '', number: '' });\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    setFormData(prevData => ({ ...prevData, [name]: value }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const { name, number } = formData;\n\n    if (!contacts || !Array.isArray(contacts.list)) {\n      console.error('Error: contacts is not an array or is undefined');\n      return;\n    }\n\n    if (\n      contacts.list.some(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      alert('Contact with this name already exists!');\n      return;\n    }\n\n    const newContact = {\n      name,\n      phone: number,\n    };\n\n    dispatch(createContact(newContact));\n    setFormData({ name: '', number: '' });\n  };\n\n  return (\n    <Box as=\"form\" onSubmit={handleSubmit} my=\"10\">\n      <FormControl>\n        <FormLabel htmlFor=\"number\">Number</FormLabel>\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          maxLength=\"30\"\n          pattern=\"(-)?\\d{1,}|(-)?\\d{1,}(\\.)\\d{1,}|(-)?\\d{1,}(\\s)(-)?\\d{1,}|(-)?\\d{1,}(\\s)(-)?\\d{1,}(\\s)(-)?\\d{1,}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          placeholder=\"e.g. 123-456-789\"\n          required\n          mb=\"4\"\n          value={formData.number}\n          onChange={handleChange}\n        />\n      </FormControl>\n      <FormControl>\n        <FormLabel htmlFor=\"name\">Name</FormLabel>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          maxLength=\"30\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          placeholder=\"e.g. John Doe\"\n          required\n          mb=\"4\"\n          value={formData.name}\n          onChange={handleChange}\n        />\n        <Button type=\"submit\">Add contact</Button>\n      </FormControl>\n    </Box>\n  );\n};\n\nexport default ContactForm;\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface GridOptions {\n  /**\n   * Shorthand prop for `gridTemplateColumns`\n   * @type SystemProps[\"gridTemplateColumns\"]\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Shorthand prop for `gridGap`\n   * @type SystemProps[\"gridGap\"]\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Shorthand prop for `gridRowGap`\n   * @type SystemProps[\"gridRowGap\"]\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Shorthand prop for `gridColumnGap`\n   * @type SystemProps[\"gridColumnGap\"]\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Shorthand prop for `gridAutoFlow`\n   * @type SystemProps[\"gridAutoFlow\"]\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Shorthand prop for `gridAutoRows`\n   * @type SystemProps[\"gridAutoRows\"]\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Shorthand prop for `gridAutoColumns`\n   * @type SystemProps[\"gridAutoColumns\"]\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Shorthand prop for `gridTemplateRows`\n   * @type SystemProps[\"gridTemplateRows\"]\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Shorthand prop for `gridTemplateAreas`\n   * @type SystemProps[\"gridTemplateAreas\"]\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Shorthand prop for `gridColumn`\n   * @type SystemProps[\"gridColumn\"]\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Shorthand prop for `gridRow`\n   * @type SystemProps[\"gridRow\"]\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof GridOptions>,\n    GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">(function Grid(props, ref) {\n  const {\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nGrid.displayName = \"Grid\"\n","// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport {\n  breakpoints,\n  mapResponsive,\n  objectToArrayNotation,\n  arrayToObjectNotation,\n  isResponsiveObjectLike,\n  isCustomBreakpoint\n};\n","import {\n  forwardRef,\n  getToken,\n  ResponsiveValue,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component that uses the `Grid` component and provides\n * a simpler interface to create responsive grid layouts.\n *\n * Provides props that easily define columns and spacing.\n *\n * @see Docs https://chakra-ui.com/simplegrid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">(\n  function SimpleGrid(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } =\n      props\n\n    const theme = useTheme()\n    const templateColumns = minChildWidth\n      ? widthToColumns(minChildWidth, theme)\n      : countToColumns(columns)\n\n    return (\n      <Grid\n        ref={ref}\n        gap={spacing}\n        columnGap={spacingX}\n        rowGap={spacingY}\n        templateColumns={templateColumns}\n        {...rest}\n      />\n    )\n  },\n)\n\nSimpleGrid.displayName = \"SimpleGrid\"\n\nfunction toPx(n: string | number) {\n  return typeof n === \"number\" ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any, theme: Record<string, any>) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme)\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`\n  })\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    value === null ? null : `repeat(${value}, minmax(0, 1fr))`,\n  )\n}\n","import { forwardRef } from \"@chakra-ui/system\"\nimport { cloneElement, isValidElement } from \"react\"\nimport { Button, ButtonProps } from \"./button\"\n\ntype OmittedProps =\n  | \"leftIcon\"\n  | \"rightIcon\"\n  | \"loadingText\"\n  | \"iconSpacing\"\n  | \"spinnerPlacement\"\n\ninterface BaseButtonProps extends Omit<ButtonProps, OmittedProps> {}\n\nexport interface IconButtonProps extends BaseButtonProps {\n  /**\n   * The icon to be used in the button.\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement\n  /**\n   * If `true`, the button will be perfectly round. Else, it'll be slightly round\n   *\n   * @default false\n   */\n  isRound?: boolean\n  /**\n   * A11y: A label that describes the button\n   */\n  \"aria-label\": string\n}\n\n/**\n * Icon button renders an icon within a button.\n *\n * @see Docs https://chakra-ui.com/docs/components/icon-button\n */\nexport const IconButton = forwardRef<IconButtonProps, \"button\">(\n  (props, ref) => {\n    const { icon, children, isRound, \"aria-label\": ariaLabel, ...rest } = props\n\n    /**\n     * Passing the icon as prop or children should work\n     */\n    const element = icon || children\n    const _children = isValidElement(element)\n      ? cloneElement(element as any, {\n          \"aria-hidden\": true,\n          focusable: false,\n        })\n      : null\n\n    return (\n      <Button\n        padding=\"0\"\n        borderRadius={isRound ? \"full\" : undefined}\n        ref={ref}\n        aria-label={ariaLabel}\n        {...rest}\n      >\n        {_children}\n      </Button>\n    )\n  },\n)\n\nIconButton.displayName = \"IconButton\"\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectFilter,\n  selectContacts,\n} from '../../redux/contacts/contactsSlice';\nimport { fetchContacts } from '../../redux/contacts/operations';\nimport {\n  Text,\n  IconButton,\n  CloseButton,\n  SimpleGrid,\n  Box,\n} from '@chakra-ui/react';\nimport { selectIsLoading } from '../../redux/contacts/selectors';\nimport { deleteContact } from '../../redux/contacts/operations';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const filteredContacts = Array.isArray(contacts)\n    ? contacts.filter(\n        contact =>\n          contact.name.toLowerCase().includes(filter.toLowerCase()) ||\n          contact.phone\n            .replace(/-|\\s/g, '')\n            .includes(filter.replace(/-|\\s/g, ''))\n      )\n    : [];\n\n  const handleDelete = idToDelete => {\n    dispatch(deleteContact(idToDelete));\n  };\n\n  return (\n    <>\n      {isLoading ? (\n        <Text>Loading...</Text>\n      ) : (\n        <SimpleGrid columns={5} spacing={10} overflow=\"hidden\">\n          {filteredContacts.length > 0 ? (\n            filteredContacts.map(({ id, name, phone }) => (\n              <Box\n                key={id}\n                borderWidth=\"1px\"\n                borderRadius=\"lg\"\n                overflow=\"hidden\"\n              >\n                <Box p=\"4\">\n                  <IconButton\n                    icon={<CloseButton />}\n                    onClick={() => handleDelete(id)}\n                  />\n                  <Text>{name}</Text>\n                  <Text>{phone}</Text>\n                </Box>\n              </Box>\n            ))\n          ) : (\n            <Text>No contacts found</Text>\n          )}\n        </SimpleGrid>\n      )}\n    </>\n  );\n};\n\nexport default ContactList;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/contactsSlice';\nimport { selectFilter } from '../../redux/contacts/selectors';\nimport { Input, FormControl, FormLabel } from '@chakra-ui/react';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const handleFilterChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <FormControl id=\"filter\" mb=\"5\">\n      <FormLabel>Search list:</FormLabel>\n      <Input\n        type=\"search\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleFilterChange}\n        placeholder=\"Find contacts by name or phone number\"\n        required\n      />\n    </FormControl>\n  );\n};\n\nexport default Filter;\n","import React from 'react';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\n\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\n\nimport { fetchContacts } from '../redux/contacts/operations';\nimport { selectIsLoading } from '../redux/contacts/selectors';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <Helmet>\n        <h1>Phonebook</h1>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      {isLoading ? null : <Filter />}\n      <ContactList />\n    </div>\n  );\n};\n\nexport default App;\n"],"names":["selectContacts","state","contacts","selectFilter","filter","selectIsLoading","isLoading","useSelector","dispatch","useDispatch","_useState","useState","name","number","_useState2","_slicedToArray","formData","setFormData","handleChange","e","_e$target","target","value","prevData","_objectSpread","_defineProperty","_jsxs","Box","as","onSubmit","preventDefault","Array","isArray","list","some","contact","toLowerCase","alert","newContact","phone","createContact","console","error","my","children","FormControl","_jsx","FormLabel","htmlFor","Input","type","maxLength","pattern","title","placeholder","required","mb","onChange","Button","Grid","forwardRef","props","ref","templateAreas","gap","rowGap","columnGap","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","rest","styles","display","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","chakra","div","__css","displayName","Object","freeze","mapResponsive","prop","mapper","map","item","isObject","keys","reduce","result","key","SimpleGrid","columns","spacingX","spacingY","spacing","minChildWidth","theme","useTheme","width","n","_value","getToken","widthToColumns","IconButton","icon","isRound","ariaLabel","element","_children","isValidElement","cloneElement","focusable","padding","borderRadius","useEffect","fetchContacts","filteredContacts","includes","replace","_Fragment","Text","overflow","length","_ref","id","borderWidth","p","CloseButton","onClick","idToDelete","deleteContact","setFilter","Helmet","ContactForm","Filter","ContactList"],"sourceRoot":""}