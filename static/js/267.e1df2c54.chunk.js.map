{"version":3,"file":"static/js/267.e1df2c54.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","../node_modules/@chakra-ui/layout/src/grid.tsx","../node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs","../node_modules/@chakra-ui/layout/src/simple-grid.tsx","../node_modules/@chakra-ui/button/src/icon-button.tsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.contacts.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { FormControl, FormLabel, Input, Button, Box } from '@chakra-ui/react';\n\nconst ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const [formData, setFormData] = useState({ name: '', number: '' });\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    setFormData(prevData => ({ ...prevData, [name]: value }));\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    const newContactExists = contacts.some(\n      contact => contact.name === formData.name\n    );\n    if (newContactExists) {\n      alert(`${formData.name} is in use. Try another name.`);\n      return;\n    }\n\n    dispatch(createContact(formData));\n    setFormData({ name: '', number: '' });\n  };\n\n  return (\n    <Box as=\"form\" onSubmit={handleSubmit} my=\"10\">\n      <FormControl>\n        <FormLabel htmlFor=\"number\">Number</FormLabel>\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          maxLength=\"30\"\n          pattern=\"(-)?\\d{1,}|(-)?\\d{1,}(\\.)\\d{1,}|(-)?\\d{1,}(\\s)(-)?\\d{1,}|(-)?\\d{1,}(\\s)(-)?\\d{1,}(\\s)(-)?\\d{1,}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          placeholder=\"e.g. 0123456789\"\n          required\n          mb=\"4\"\n          value={formData.number}\n          onChange={handleChange}\n        />\n      </FormControl>\n      <FormControl>\n        <FormLabel htmlFor=\"name\">Name</FormLabel>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          maxLength=\"30\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          placeholder=\"e.g. John Doe\"\n          required\n          mb=\"4\"\n          value={formData.name}\n          onChange={handleChange}\n        />\n        <Button type=\"submit\">Add contact</Button>\n      </FormControl>\n    </Box>\n  );\n};\n\nexport default ContactForm;\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface GridOptions {\n  /**\n   * Shorthand prop for `gridTemplateColumns`\n   * @type SystemProps[\"gridTemplateColumns\"]\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Shorthand prop for `gridGap`\n   * @type SystemProps[\"gridGap\"]\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Shorthand prop for `gridRowGap`\n   * @type SystemProps[\"gridRowGap\"]\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Shorthand prop for `gridColumnGap`\n   * @type SystemProps[\"gridColumnGap\"]\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Shorthand prop for `gridAutoFlow`\n   * @type SystemProps[\"gridAutoFlow\"]\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Shorthand prop for `gridAutoRows`\n   * @type SystemProps[\"gridAutoRows\"]\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Shorthand prop for `gridAutoColumns`\n   * @type SystemProps[\"gridAutoColumns\"]\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Shorthand prop for `gridTemplateRows`\n   * @type SystemProps[\"gridTemplateRows\"]\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Shorthand prop for `gridTemplateAreas`\n   * @type SystemProps[\"gridTemplateAreas\"]\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Shorthand prop for `gridColumn`\n   * @type SystemProps[\"gridColumn\"]\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Shorthand prop for `gridRow`\n   * @type SystemProps[\"gridRow\"]\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof GridOptions>,\n    GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">(function Grid(props, ref) {\n  const {\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nGrid.displayName = \"Grid\"\n","// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport {\n  breakpoints,\n  mapResponsive,\n  objectToArrayNotation,\n  arrayToObjectNotation,\n  isResponsiveObjectLike,\n  isCustomBreakpoint\n};\n","import {\n  forwardRef,\n  getToken,\n  ResponsiveValue,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component that uses the `Grid` component and provides\n * a simpler interface to create responsive grid layouts.\n *\n * Provides props that easily define columns and spacing.\n *\n * @see Docs https://chakra-ui.com/simplegrid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">(\n  function SimpleGrid(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } =\n      props\n\n    const theme = useTheme()\n    const templateColumns = minChildWidth\n      ? widthToColumns(minChildWidth, theme)\n      : countToColumns(columns)\n\n    return (\n      <Grid\n        ref={ref}\n        gap={spacing}\n        columnGap={spacingX}\n        rowGap={spacingY}\n        templateColumns={templateColumns}\n        {...rest}\n      />\n    )\n  },\n)\n\nSimpleGrid.displayName = \"SimpleGrid\"\n\nfunction toPx(n: string | number) {\n  return typeof n === \"number\" ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any, theme: Record<string, any>) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme)\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`\n  })\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    value === null ? null : `repeat(${value}, minmax(0, 1fr))`,\n  )\n}\n","import { forwardRef } from \"@chakra-ui/system\"\nimport { cloneElement, isValidElement } from \"react\"\nimport { Button, ButtonProps } from \"./button\"\n\ntype OmittedProps =\n  | \"leftIcon\"\n  | \"rightIcon\"\n  | \"loadingText\"\n  | \"iconSpacing\"\n  | \"spinnerPlacement\"\n\ninterface BaseButtonProps extends Omit<ButtonProps, OmittedProps> {}\n\nexport interface IconButtonProps extends BaseButtonProps {\n  /**\n   * The icon to be used in the button.\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement\n  /**\n   * If `true`, the button will be perfectly round. Else, it'll be slightly round\n   *\n   * @default false\n   */\n  isRound?: boolean\n  /**\n   * A11y: A label that describes the button\n   */\n  \"aria-label\": string\n}\n\n/**\n * Icon button renders an icon within a button.\n *\n * @see Docs https://chakra-ui.com/docs/components/icon-button\n */\nexport const IconButton = forwardRef<IconButtonProps, \"button\">(\n  (props, ref) => {\n    const { icon, children, isRound, \"aria-label\": ariaLabel, ...rest } = props\n\n    /**\n     * Passing the icon as prop or children should work\n     */\n    const element = icon || children\n    const _children = isValidElement(element)\n      ? cloneElement(element as any, {\n          \"aria-hidden\": true,\n          focusable: false,\n        })\n      : null\n\n    return (\n      <Button\n        padding=\"0\"\n        borderRadius={isRound ? \"full\" : undefined}\n        ref={ref}\n        aria-label={ariaLabel}\n        {...rest}\n      >\n        {_children}\n      </Button>\n    )\n  },\n)\n\nIconButton.displayName = \"IconButton\"\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter, selectContacts } from '../../redux/contacts/selectors';\nimport { fetchContacts } from '../../redux/contacts/operations';\nimport {\n  Text,\n  IconButton,\n  CloseButton,\n  SimpleGrid,\n  Box,\n} from '@chakra-ui/react';\nimport { selectIsLoading } from '../../redux/contacts/selectors';\nimport { deleteContact } from '../../redux/contacts/operations';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const filteredContacts = Array.isArray(contacts)\n    ? contacts.filter(\n        contact =>\n          contact.name.toLowerCase().includes(filter.toLowerCase()) ||\n          (contact.phone && contact.number.includes(filter))\n      )\n    : [];\n\n  const handleDelete = idToDelete => {\n    dispatch(deleteContact(idToDelete));\n  };\n\n  return (\n    <>\n      {isLoading ? (\n        <Text>Loading...</Text>\n      ) : (\n        <SimpleGrid columns={5} spacing={2} overflow=\"hidden\" width=\"800px\">\n          {filteredContacts.length > 0 ? (\n            filteredContacts.map(({ id, name, number }) => (\n              <Box\n                key={id}\n                borderWidth=\"4px\"\n                borderRadius=\"1g\"\n                overflow=\"hidden\"\n              >\n                <Box p=\"4\">\n                  <IconButton\n                    icon={<CloseButton />}\n                    onClick={() => handleDelete(id)}\n                  />\n                  <Text>{name}</Text>\n                  <Text>{number}</Text>\n                </Box>\n              </Box>\n            ))\n          ) : (\n            <Text>No contacts found</Text>\n          )}\n        </SimpleGrid>\n      )}\n    </>\n  );\n};\n\nexport default ContactList;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/contactsSlice';\nimport { selectFilter } from '../../redux/contacts/selectors';\nimport { Input, FormControl, FormLabel } from '@chakra-ui/react';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const handleFilterChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <FormControl id=\"filter\" mb=\"5\">\n      <FormLabel>Search list:</FormLabel>\n      <Input\n        type=\"search\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleFilterChange}\n        placeholder=\"Find contacts by name or phone number\"\n        required\n      />\n    </FormControl>\n  );\n};\n\nexport default Filter;\n","import React from 'react';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\n\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\n\nimport { fetchContacts } from '../redux/contacts/operations';\nimport { selectIsLoading } from '../redux/contacts/selectors';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <Helmet>\n        <h1>Phonebook</h1>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      {isLoading ? null : <Filter />}\n      <ContactList />\n    </div>\n  );\n};\n\nexport default App;\n"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","useSelector","dispatch","useDispatch","_useState","useState","name","number","_useState2","_slicedToArray","formData","setFormData","handleChange","e","_e$target","target","value","prevData","_objectSpread","_defineProperty","_jsxs","Box","as","onSubmit","evt","preventDefault","some","contact","alert","concat","createContact","my","children","FormControl","_jsx","FormLabel","htmlFor","Input","type","maxLength","pattern","title","placeholder","required","mb","onChange","Button","Grid","forwardRef","props","ref","templateAreas","gap","rowGap","columnGap","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","rest","styles","display","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","chakra","div","__css","displayName","Object","freeze","mapResponsive","prop","mapper","Array","isArray","map","item","isObject","keys","reduce","result","key","SimpleGrid","columns","spacingX","spacingY","spacing","minChildWidth","theme","useTheme","width","n","_value","getToken","widthToColumns","IconButton","icon","isRound","ariaLabel","element","_children","isValidElement","cloneElement","focusable","padding","borderRadius","useEffect","fetchContacts","filteredContacts","toLowerCase","includes","phone","_Fragment","Text","overflow","length","_ref","id","borderWidth","p","CloseButton","onClick","idToDelete","deleteContact","setFilter","Helmet","ContactForm","Filter","ContactList"],"sourceRoot":""}